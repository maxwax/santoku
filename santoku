#!/bin/bash

#
# A wrapper for Chef's 'knife ssh' which makes it more secure & easy to use
#
# Copyright 2015 Maxwell Spangler, maxwell@maxwellspangler.com
#

# Set the version
VERSION="2015.0504.01"

# Define a config file location
CONFIG_FILE=$HOME/.santoku-config

#
# Functions
#

function usage {
  echo "santoku $VERSION"
  echo
  echo "Syntax: $ santoku [options] <resource> <command>"
  echo
  echo "Examples:"
  echo
  echo "$ santoku prod ssh \"name:mynode1*.company.com\" \"df -h\""
  echo
  echo "$ santoku dev ssh \"name:mynode1*.company.com\" \"date\""
  echo
}

# Capture the resource name and chef commands
function capture_parameters {

  # We might get called twice, so reset this each time we get called
  CLI_ENV=""
  CLI_COMMAND=""

  # Capture resource
  if [[ "$1" != "" ]]
  then
    CLI_ENV="$1"

    # Bump the resource name out of the parameters
    # we're now left with only info that will be passed through to chef
    shift

    if [[ "$1" != "" ]]
    then
      # Capture ALL remaining parameters 
      # We want to pass through unexpected knife commands, too
      CLI_COMMAND="$@"
    fi

  fi

  if [[ -n "$DEBUG" ]]
  then
    echo "[CLI resource] $CLI_ENV"
    echo "[CLI command    ] $CLI_COMMAND"
  fi

  # If we didn't get a triplet of these variables, error out
  if [[ ! -n "$CLI_ENV" || ! -n "$CLI_COMMAND" ]]
  then
    echo "Error: I didn't see parameters <resource> <command>"
    exit 1
  fi
}

function load_config_file {

  if [[ ! -r "$CONFIG_FILE" ]]
  then

    if [[ ! -f "$CONFIG_FILE" ]]
    then
      echo "Error: There is no config file at $CONFIG_FILE"
    else
      echo "Error: The config file at $CONFIG_FILE is not accessible."
    fi
    exit 1
  else

    # Initialize defaults
    IDX=0

    # Default the section we're processing to empty
    SECTION_NAME=""

    while read INPUT_LINE
    do

      #echo "READ: $INPUT_LINE"

      # If the line is not a comment and not empty
      if [[ ${INPUT_LINE:0:1} != "#" ]]
      then

        if [[ ${INPUT_LINE:0:1} == "[" && ${INPUT_LINE:0:5} != "[end]" ]]
        then
          #echo "Found name"

          # If we're already processing a section and we see the start of
          # a new one, our config file isn't clean, so bail out
          if [[ $SECTION_NAME != "" ]]
          then
            echo "Error: Your config file has a syntax error in section $SECTION_NAME"
            echo "Error: A new section name was encountered before the last one ended."

            exit 1
          else

            # Capture the name minus the first [
            SECTION_NAME=${INPUT_LINE:1}

            # Check for a trailing ] here, if not bail out.

            # Remove the trailing ]
            SECTION_NAME=${SECTION_NAME%%]}

            # Default all of these to empty
            SECTION_DESC=""
            SECTION_KNIFE_CFG=""
            SECTION_SSH_USER=""
            SECTION_PASS_KEY=""

          fi

        elif [[ ${INPUT_LINE:0:12} == "description=" ]]
        then
          #echo "Found description"

          # Verify that we do not already have a description
          # If we do, we're seeing a second for this section, so BAIL OUT
          if [[ $SECTION_DESC != "" ]]
          then
            echo "Error: Your config file has a syntax error in section $SECTION_NAME"
            echo "Error: A second description declaration was encountered."
            exit 1
          else
            # Capture the description
            SECTION_DESC=${INPUT_LINE:12}
          fi

        elif [[ ${INPUT_LINE:0:13} == "knife_config=" ]]
        then
          #echo "Found knife_config"

          # Verify that we do not already have a knife config file
          # If we do, we're seeing a second for this section, so BAIL OUT
          if [[ $SECTION_KNIFE_CFG != "" ]]
          then
            echo "Error: Your config file has a syntax error in section $SECTION_NAME"
            echo "Error: A second config file declaration was encountered."
            exit 1
          else
            # Capture the knife config
            SECTION_KNIFE_CFG=${INPUT_LINE:13}
          fi


        elif [[ ${INPUT_LINE:0:15} == "knife_ssh_user=" ]]
        then
          #echo "Found knife_ssh_user"

          # Verify that we do not already have an ssh user
          # If we do, we're seeing a second for this section, so BAIL OUT
          if [[ $SECTION_SSH_USER != "" ]]
          then
            echo "Error: Your config file has a syntax error in section $SECTION_NAME"
            echo "Error: A second ssh user declaration was encountered."
            exit 1
          else
            # Capture the ssh user
            SECTION_SSH_USER=${INPUT_LINE:15}
          fi

        elif [[ ${INPUT_LINE:0:9} == "pass_key=" ]]
        then
          #echo "Found pass_key"

          # Verify that we do not already have a pass key
          # If we do, we're seeing a second for this section, so BAIL OUT
          if [[ $SECTION_PASS_KEY != "" ]]
          then
            echo "Error: Your config file has a syntax error in section $SECTION_NAME"
            echo "Error: A second pass key declaration was encountered."
            exit 1
          else
            # Capture the pass key
            SECTION_PASS_KEY=${INPUT_LINE:9}
          fi

        elif [[ ${INPUT_LINE:0:8} == "confirm=" ]]
        then
          #echo "Found confirm"

          # Verify that we do not already have a confirm value
          # If we do, we're seeing a second for this section, so BAIL OUT
          if [[ $SECTION_CONFIRM != "" ]]
          then
            echo "Error: Your config file has a syntax error in section $SECTION_NAME"
            echo "Error: A second confirm value declaration was encountered."
            exit 1
          else
            # Capture the confirm value
            SECTION_CONFIRM=${INPUT_LINE:8}
          fi

        elif [[ ${INPUT_LINE:0:5} == "[end]" || -z $INPUT_LINE ]]
        then
          #echo "Found [end] or empty line"

          if [[ $SECTION_NAME == "" || -z $INPUT_LINE ]]
          then
            #echo "Ignoring blank line"
            a=0

          else

            # If we're processing a section 
            # and any parameter is missing, bail out
            if [[ $SECTION_NAME      != "" && \
                  $SECTION_DESC      == "" || \
                  $SECTION_KNIFE_CFG == "" || \
                  $SECTION_SSH_USER  == "" || \
                  $SECTION_PASS_KEY  == "" || \
                  $SECTION_CONFIRM   == "" ]]
            then
              echo "Error: Section $SECTION_NAME is missing a value."

              if [[ -z $SECTION_DESC ]]
              then
                echo "Error: Missing 'description=' declaration"
              fi

              if [[ -z $SECTION_KNIFE_CFG ]]
              then
                echo "Error: Missing 'knife_config=' declaration"
              fi

              if [[ -z $SECTION_SSH_USER ]]
              then
                echo "Error: Missing 'ssh_user=' declaration"
              fi

              if [[ -z $SECTION_PASS_KEY ]]
              then
                echo "Error: Missing 'pass_key=' declaration"
              fi

              if [[ -z $SECTION_CONFIRM ]]
              then
                echo "Error: Missing 'confirm=' declaration"
              fi

              exit 1
            fi

            # If we're processing a section and we have ALL parameters needed
            # Validate the parameters then add it to our array of chef configs
            if [[ $SECTION_NAME      != "" && \
                  $SECTION_DESC      != "" && \
                  $SECTION_KNIFE_CFG != "" && \
                  $SECTION_SSH_USER  != "" && \
                  $SECTION_PASS_KEY  != "" && \
                  $SECTION_CONFIRM   != "" ]]
            then

              # Validate that the knife config file is readable
              if [[ ! -r "$SECTION_KNIFE_CFG" ]]
              then

                echo "Error in section $SECTION_NAME"

                if [[ ! -f "$SECTION_KNIFE_CFG" ]]
                then
                  echo "Error: There is no knife config file at $SECTION_KNIFE_CFG"
                else
                  echo "Error: The knife config file at $SECTION_KNIFE_CFG is not accessible."
                fi
                exit 1
              else

                #echo
                #echo "SECTION:           |$SECTION_NAME|"
                #echo "SECTION_DESC:      |$SECTION_DESC|"
                #echo "SECTION_KNIFE_CFG: |$SECTION_KNIFE_CFG|"
                #echo "SECTION_SSH_USER:  |$SECTION_SSH_USER|"
                #echo "SECTION_PASS_KEY:  |$SECTION_PASS_KEY|"
                #echo "SECTION_CONFIRM:   |$SECTION_CONFIRM|"

                LIST_ENV[$IDX]="$SECTION_NAME"
                LIST_DESC[$IDX]="$SECTION_DESC"
                LIST_KNIFE[$IDX]="$SECTION_KNIFE_CFG"
                LIST_USER[$IDX]="$SECTION_SSH_USER"
                LIST_PASS[$IDX]="$SECTION_PASS_KEY"
                LIST_CONFIRM[$IDX]="$SECTION_CONFIRM"

                if [[ -n "$DEBUG" ]]
                then
                  echo
                  echo "Counter is $IDX"
                  echo "LIST_ENV     |${LIST_ENV[$IDX]}|"
                  echo "LIST_DESC    |${LIST_DESC[$IDX]}|"
                  echo "LIST_KNIFE   |${LIST_KNIFE[$IDX]}|"
                  echo "LIST_USER    |${LIST_USER[$IDX]}|"
                  echo "LIST_PASS    |${LIST_PASS[$IDX]}|"
                  echo "LIST_CONFIRM |${LIST_PASS[$IDX]}|"
                fi

                # Increment our counter by 1 for next element
                ((IDX++))

                # Reset all to empty
                SECTION_NAME=""
                SECTION_DESC=""
                SECTION_KNIFE_CFG=""
                SECTION_SSH_USER=""
                SECTION_PASS_KEY=""
                SECTION_CONFIRM=""
            
              fi
            fi
          fi
        fi
      fi

    done < $CONFIG_FILE

  fi

  # Set how many resources we found
  LIST_COUNT=${#LIST_ENV[@]}
  LIST_COUNT_ZERO_START=$((LIST_COUNT-1))

}

# Load items from a config file, or make a template for the user.
function load_config_file_old {

  # Do we have a readable config file?
  if [[ -r $CONFIG_FILE ]]
  then

    # Set the input field seperator to "," so values with spaces ("one two") work
    IFS=","

    # Start storing config items at array element 0
    IDX=0

    # Counter used to report errors on input file
    INPUT_LINE=0

    # Read in these fields from the file
    while read LOAD_ENV LOAD_DESC LOAD_KNIFE LOAD_USER LOAD_PASS
    do

      ((INPUT_LINE++))

      # Process this line as long as it is NOT commented out
      if [[ ${LOAD_ENV:0:1} != "#" ]]
      then

        if [[ ! -n "$LOAD_ENV" || ! -n "$LOAD_DESC" || ! -n "$LOAD_KNIFE" || \
              ! -n "$LOAD_USER" || ! -N "$LOAD_PASS" ]]
        then

          if [[ ! -n "$LOAD_ENV" ]]
          then
            echo "Config file error on line $INPUT_LINE: the resource name is not set."
            exit 1
          fi

          if [[ ! -n "$LOAD_DESC" ]]
          then
            echo "Config file error on line $INPUT_LINE: the description is not set."
            exit 1
          fi

          if [[ ! -n "$LOAD_KNIFE" ]]
          then
            echo "Config file error on line $INPUT_LINE: the knife config file is not set."
            exit 1
          fi

          if [[ ! -n "$LOAD_USER" ]]
          then
            echo "Config file error on line $INPUT_LINE: the default user is not set."
            exit 1
          fi

          if [[ ! -n "$LOAD_PASS" ]]
          then
            echo "Config file error on line $INPUT_LINE: the password key is not set."
            exit 1
          fi

        fi

        LIST_ENV[$IDX]="$LOAD_ENV"
        LIST_DESC[$IDX]="$LOAD_DESC"
        LIST_KNIFE[$IDX]="$LOAD_KNIFE"
        LIST_USER[$IDX]="$LOAD_USER"
        LIST_PASS[$IDX]="$LOAD_PASS"

        if [[ -n "$DEBUG" ]]
        then
          echo
          echo "Counter is $IDX"
          echo "LOAD_ENV   $LOAD_ENV"
          echo "LOAD_DESC  $LOAD_DESC"
          echo "LOAD_KNIFE $LOAD_KNIFE"
          echo "LOAD_USER  $LOAD_USER"
          echo "LOAD_PASS  $LOAD_PASS"
        fi

        # Increment our counter by 1
        ((IDX++))

      fi
    done < $CONFIG_FILE

    # We're done reading, reset this
    unset IFS

    # Set how many resources we found
    LIST_COUNT=${#LIST_ENV[@]}
    LIST_COUNT_ZERO_START=$((LIST_COUNT-1))

  else
    cat > $CONFIG_FILE << CONFIG_TEMPLATE
#
# Configuration file for santoku, a Chef 'knife' wrapper
#
resource-nickname,"Environment description","~/.chef/sample-chef-config.rb","username,password-key"
my-dev,"My development resource","~/.chef/knife.rb","root","my-keys/my-dev-root-pass"
#
#[resource]
#description=This is the production resource
#name=prod
#knife_config=/home/user/.chef/knife.rb
#ssh_user=maxwell
#pass_key="Lab/prod-maxwell"

CONFIG_TEMPLATE

    echo "I've created a sample $HOME/.santoku-config file for you."
    echo "Please edit it with the appropriate knife config values."
    exit 0
  fi
}

# List all entries in the configuration file
function list_config_items {
  echo "You have $LIST_COUNT items in your configuration file:"
  echo
  for IDX in $(seq 0 $LIST_COUNT_ZERO_START)
  do
    echo "Resource: ${LIST_ENV[$IDX]}"
    echo "    Description:  ${LIST_DESC[$IDX]}"
    echo "    Knife Config: ${LIST_KNIFE[$IDX]}"
    echo "    SSH User:     ${LIST_USER[$IDX]}"
    echo "    PASS Key:     ${LIST_PASS[$IDX]}"
    echo "    Confirm SSH:  ${LIST_CONFIRM[$IDX]}"
    echo
  done
}

#
# Initialization
#

# Create new resources array
declare -a LIST_ENV
declare -a LIST_DESC
declare -a LIST_KNIFE
declare -a LIST_USER
declare -a LIST_PASS
declare -a LIST_CONFIRM

# Operational (non-option) parameters provided by the user
CLI_ENV=""
CLI_SELECT=""
CLI_COMMAND=""

# Declare these here for global scope use later
DEBUG=""
SAVE_HTTP_PROXY=""
SAVE_HTTPS_PROXY=""
SAVE_FTP=""
SAVE_NO_PROXY=""

# Number of elements in the LIST_ array. Counted first as 1-n, then as 0-n
LIST_COUNT=0
LIST_COUNT_ZERO_START=0

#
# Command line parameters
#

# User provided no parameters, just show --help"
if [[ $1 == "" ]]
then
  echo "Error: Santoku requires parameters to work."
  usage
  exit 1
fi

# While length of $1 is not zero
while [ "$1" != "" ]  
do

  case $1 in

    # Debug mode
    "--debug" )
      DEBUG=true;;

    # List configuration file entries
    "--list" )
      load_config_file
      list_config_items
      exit 0;;

    # I don't know what I want! Help me!
    "-h" | "--help" | "--syntax") 
      usage
      exit 0;;

    # NO dash in front means <env> <selection> <cmd> should be seen
    *)

      # dash or dash-dash commands seen here are unknown and an error
      # non-dash content should be our knife parameters
      if [[ ${1:0:1} == "-" || ${1:0:2} == "--" ]]
      then
        echo "Error: I don't know the option: $1"
        exit 1
      else
        # Pass all CLI variables to capture_parameters to load knife parameters
        capture_parameters ${@}

        # shift the resource out of the way so our $@ variable can be
        # passed on to knife without processing
        shift

        # We don't want to do anything else with the rest of the line, stop now
        break
      fi
    ;;
  esac 

  shift
done 

#
# Config file: Read one in or make a template file
#

# If a config file is readable, let's load it
load_config_file

#exit 1

# Report config file for debugging
if [[ -n "$DEBUG" ]]
then
  list_config_items
fi

#
# Find our configuration info using the command line parameter
#

# Default to empty
USE_ENV=""

for IDX in $(seq 0 $LIST_COUNT_ZERO_START)
do
  if [[ -n "$DEBUG" ]]
  then
    echo ${LIST_ENV[$IDX]} "|" $CLI_ENV 
  fi

  # If this array element matches our selected resource, use its values
  if [[ ${LIST_ENV[$IDX]} == $CLI_ENV ]]
  then
    if [[ -n "$DEBUG" ]]
    then
      echo "[Found Env] | ${LIST_ENV[$IDX]} | ${LIST_DESC[$IDX]} | ${LIST_KNIFE[$IDX]} | ${LIST_USER[$IDX]} | ${LIST_PASS[$IDX]}"
    fi

    # Capture array values; later use will be more readable than array accesses
    USE_ENV="${LIST_ENV[$IDX]}"
    USE_DESC="${LIST_DESC[$IDX]}"
    USE_KNIFE="${LIST_KNIFE[$IDX]}"
    USE_USER="${LIST_USER[$IDX]}"
    USE_PASS="${LIST_PASS[$IDX]}"

    # Stop searching the array
    break
  fi
done

# Verify that we found an resource
if [[ ! -n "$USE_ENV" ]]
then
  echo "Error: No resource named '$CLI_ENV' was found in the config file."
  exit 1
fi

# If we're doing 'knife ssh' provide a username and password
if [[ $1 == "ssh" ]]
then

  # If the config file has this phrase for a password key,
  # then we will interactively ask the user for a password instead of
  # using a key store
  if [[ $USE_PASS != "ASK-ME" ]]
  then

    #
    # Obtain a password from the keystore using 'pass'
    #

    # Call the 'pass' with a password key name and return a password
    USE_PASSWORD=$(pass "$USE_PASS" | grep -v WARNING 2>&1 )
    PASSWORD_ERROR=$?
    if [[ $PASSWORD_ERROR != 0 ]]
    then
      echo "Error: I can't obtain a password via 'pass' for $USE_PASS"
      exit 1
    else
      if [[ -n "$DEBUG" ]]
      then
        echo "USE_PASSWORD $USE_PASSWORD"
      fi
    fi
  else

    # Ask the user for a password
    read -s -p "Specify a password for $USE_USER :" USE_PASSWORD
    
    # Force newline since read appears to capture the newline
    echo

    # Verify that we got something from the user
    if [[ ! -n "$USE_PASSWORD" ]]
    then
      echo "Error: No password specified for knife ssh."
      exit 1
    fi

  fi

  if [[ -n "$DEBUG" ]]
  then
    echo knife "$@" --config "$USE_KNIFE" -x $USE_USER -P $USE_PASSWORD
  fi

  # Call knife with a password to facilitate 'knife ssh'
  knife "$@" --config "$USE_KNIFE" -x $USE_USER -P $USE_PASSWORD
else
  if [[ -n "$DEBUG" ]]
  then
    echo knife "$@" --config "$USE_KNIFE"
  fi

  # Call knife without a password
  knife "$@" --config "$USE_KNIFE"
fi
